    - name: upgrade all packages
      yum: name=* state=latest

    - copy: src=install_docker/overlay.conf
        dest=/etc/modules-load.d/overlay.conf
              
    - copy: src=install_docker/docker.repo
        dest=/etc/yum.repos.d/docker.repo 
      
    - name: Create directory     
      file: path=/etc/systemd/system/docker.service.d  state=directory    
        
    - copy: src=install_docker/override.conf
        dest=/etc/systemd/system/docker.service.d/override.conf
    
    - name: Install docker-engine-1.13.1
      yum: name=docker-engine-1.13.1 

    - pause: seconds=1
        
    - name: reload sytemd
      command: /usr/bin/systemctl daemon-reload

    - name: start docker
      service: name=docker state=started      
        
    - name: enable service docker and ensure it is not masked
      systemd:
        name: docker
        enabled: yes
        masked: no
          
    - name: Check if Service Exists
      stat: path=/etc/init.d/firewalld
      register: service_status

    - name: Stop Service
      service: name=firewalld state=stopped
      when: service_status.stat.exists
      register: service_stopped          

    - name: Install chrony
      yum: name=chrony
     
    - copy: src=install_docker/chrony.conf
        dest=/etc/chrony.conf
    

    - name: install dependencies
      yum: name={{ item  }} state=present
      with_items:
        - tar
        - xz
        - unzip
        - ipset
        - curl

    - name: add group nogroup
      group: name=nogroup state=present

    - name: disable selinux
      selinux: state=disabled

    - copy: src=install_docker/environment
        dest=/etc/environment

      
#    - lineinfile: dest=/etc/selinux/config
#        state=present
#        regexp='^(.*)SELINUX=enforcing(.*)$'
#        line='\1SELINUX=permissive\2'
#        backup=yes
#        backrefs=yes
    
    - name: restart host
      shell: sleep 1;/usr/sbin/reboot
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for host to come back online
      local_action: wait_for host={{ inventory_hostname }} search_regex=OpenSSH port=22 timeout=300 state=started
      
      
    #- copy: src=install_docker/resolv.conf
    #    dest=/etc/resolv.conf
        
        
    #- copy: src=install_docker/hosts
    #    dest=/etc/hosts         
